import {
    Button,
    Grid,
    Paper,
    Table,
    TableBody,
    TableCell,
    TableContainer,
    TableHead,
    TableRow
} from '@mui/material';
import axios from 'axios';
import React, { useEffect, useState } from 'react';
import Swal from 'sweetalert2';

import { useBaseURL } from '../../../../Context/BaseURLProvider';

import BandiTransfer from '../../Dialogs/BandiTransferModal';
import { useAuth } from '../../../../Context/AuthContext';
import fetchBandiEscape from '../../Apis_to_fetch/useFetchBandiEscape';


const BandiEscapeTable = ( { bandi_id } ) => {
    const BASE_URL = useBaseURL();
    const { state: authState } = useAuth();

    const [fetchedBandies, setFetchedBandies] = useState( [] );
    const [loading, setLoading] = useState( false );
    const [modalOpen, setModalOpen] = useState( false );
    const [editingData, setEditingData] = useState( null );

    // ‚úÖ Fetch data    
    const {records: bandiEscapeDetails, loading:EscapeDetailsLoading, refetch}=fetchBandiEscape(bandi_id);
    // console.log(bandiTransferHistory)
    // ‚úÖ DELETE handler
    const handleDelete = async ( id ) => {
        const confirm = await Swal.fire( {
            title: '‡§™‡§ï‡•ç‡§ï‡§æ ‡§π‡•Å‡§®‡•Å‡§π‡•Å‡§®‡•ç‡§õ?',
            text: '‡§Ø‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§Æ‡•á‡§ü‡§æ‡§á‡§®‡•á‡§õ!',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: '‡§Æ‡•á‡§ü‡§æ‡§â‡§®‡•Å‡§π‡•ã‡§∏‡•ç',
            cancelButtonText: '‡§∞‡§¶‡•ç‡§¶ ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç',
        } );

        if ( confirm.isConfirmed ) {
            try {
                await axios.delete( `${ BASE_URL }/bandi/delete_bandi_escape_details/${ id }` );
                // fetchBandies();
                Swal.fire( '‡§π‡§ü‡§æ‡§á‡§Ø‡•ã!', '‡§∞‡§ø‡§ï‡§∞‡•ç‡§° ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Æ‡•á‡§ü‡§æ‡§á‡§Ø‡•ã‡•§', 'success' );
            } catch ( error ) {
                Swal.fire( '‡§§‡•ç‡§∞‡•Å‡§ü‡§ø!', '‡§°‡•á‡§ü‡§æ ‡§Æ‡•á‡§ü‡§æ‡§â‡§Å‡§¶‡§æ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü‡§Ø‡•ã‡•§', 'error' );
            }
        }
    };

    const handleEdit = ( data ) => {
        setEditingData( data );
        // console.log(editingData)
        setModalOpen( true );
    };
    const handleAdd = ( bandi_id ) => {
        setEditingData( { bandi_id } );
        setModalOpen( true );
    };

    const handleSave = async ( formData, id ) => {
        try {
            let response;
            if ( id ) {
                // Update existing contact
                response = await axios.put(
                    `${ BASE_URL }/bandiTransfer/update_bandi_escape_details/${ id }`,
                    { bandi_transfer_details: [formData] },
                    { withCredentials: true }
                );

                if ( response.data.Status ) {
                    Swal.fire( '‡§∏‡§´‡§≤ ‡§≠‡§Ø‡•ã !', '‡§°‡•á‡§ü‡§æ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ó‡§∞‡§ø‡§Ø‡•ã', 'success' );
                } else {
                    throw new Error( response.data.message || '‡§Ö‡§™‡§°‡•á‡§ü ‡§ó‡§∞‡•ç‡§® ‡§∏‡§ï‡§ø‡§è‡§® ‡•§' );
                }
            } else {
                // Create new contact
                response = await axios.post(
                    `${ BASE_URL }/bandiTransfer/create_bandi_escape_details`,
                    {
                        bandi_id: bandi_id,
                        bandi_transfer_details: [formData],
                    },
                    { withCredentials: true }
                );
                if ( response.data.Status ) {
                    Swal.fire( '‡§∏‡§´‡§≤ ‡§≠‡§Ø‡•ã !', '‡§®‡§Ø‡§æ‡§Å ‡§°‡•á‡§ü‡§æ ‡§•‡§™‡§ø‡§Ø‡•ã ‡•§', 'success' );
                } else {
                    throw new Error( response.data.message || '‡§•‡§™‡•ç‡§® ‡§∏‡§ï‡§ø‡§è‡§® ‡•§' );
                }
            }
            // await refetch();
            setModalOpen( false );
        } catch ( error ) {
            console.error( "‚ùå Axios Error:", error );
            Swal.fire( '‡§§‡•ç‡§∞‡•Å‡§ü‡§ø!', error.message || '‡§∏‡§∞‡•ç‡§≠‡§∞ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§Ö‡§∏‡§´‡§≤ ‡§≠‡§Ø‡•ã ‡•§', 'error' );
        }
    };

    const shouldShowDeleteButton = ( opt, role_Id ) => {
        return opt.is_completed === 'Pending' || role_Id === 99;
    };


    return (
        <Grid container spacing={2}>
            <BandiTransfer
                open={modalOpen}
                onClose={() => setModalOpen( false )}
                onSave={handleSave}
                editingData={editingData}
            />
            <Grid container size={{ xs: 12 }}>
                <Grid>
                    <h3> ‡§Ö‡§π‡§ø‡§≤‡•á ‡§∏‡§Æ‡•ç‡§Æ ‡§≠‡§æ‡§ó‡•á‡§ï‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£‡§É</h3>
                </Grid>
                <Grid marginTop={2}>
                    &nbsp; <Button variant='contained' size='small' onClick={() => handleAdd( bandi_id )}>Add</Button>
                </Grid>
            </Grid>
            <Grid size={{ xs: 12 }}>
                <TableContainer component={Paper}>
                    <Table size='small' border={2}>
                        <TableHead>
                            <TableRow>
                                <TableCell align="center">‡§∏‡§ø.‡§®‡§Ç.</TableCell>
                                <TableCell align="center">‡§ï‡§æ‡§∞‡§æ‡§ó‡§æ‡§∞</TableCell>
                                <TableCell align="center">‡§≠‡§æ‡§ó‡•á‡§ï‡•ã ‡§Æ‡§ø‡§§‡§ø</TableCell>
                                <TableCell align="center">‡§≠‡§æ‡§ó‡•ç‡§® ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§ó‡§∞‡•á‡§ï‡•ã ‡§µ‡§ø‡§ß‡§ø/‡§§‡§∞‡§ø‡§ï‡§æ</TableCell>
                                <TableCell align="center">‡§π‡§æ‡§≤‡§ï‡•ã ‡§Ö‡§µ‡§∏‡•ç‡§•‡§æ</TableCell>
                                <TableCell align="center">‡§™‡§ï‡•ç‡§∞‡§æ‡§â/‡§π‡§æ‡§ú‡§ø‡§∞ ‡§Æ‡§ø‡§§‡§ø</TableCell>
                                <TableCell align="center">‡§™‡§ï‡•ç‡§∞‡§æ‡§â ‡§ó‡§∞‡•ç‡§®‡•á ‡§®‡§ø‡§ï‡§æ‡§Ø</TableCell>
                                <TableCell align="center">‡§™‡§ï‡•ç‡§∞‡§æ‡§â ‡§™‡§∞‡•á‡§ï‡•ã ‡§∏‡•ç‡§•‡§æ‡§®</TableCell>
                                <TableCell align="center">#</TableCell>
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            {bandiEscapeDetails.map( ( opt, index ) => (
                                <TableRow key={opt.id || index}>
                                    <TableCell align="center">{index + 1}</TableCell>
                                    <TableCell align="center">{opt.transfer_to_office_fn}</TableCell>
                                    <TableCell align="center">{opt.transfer_from_date}</TableCell>
                                    <TableCell align="center">{opt.transfer_to_date}</TableCell>
                                    <TableCell align="center">{opt.transfer_reason_np}</TableCell>
                                    <TableCell align="center">{opt.transfer_reason}</TableCell>

                                    <TableCell align="center">
                                        <Grid item>
                                            <Button variant="contained" color='success' onClick={() => handleEdit( opt )}>‚úèÔ∏è</Button>
                                        </Grid>
                                        {/* Delete Button (Conditional) */}
                                        {shouldShowDeleteButton( opt, authState.role_Id ) && (
                                            <Grid item>
                                                <Button variant="contained" color="error" onClick={() => handleDelete( opt.id )}>
                                                    üóëÔ∏è
                                                </Button>
                                            </Grid>
                                        )}
                                    </TableCell>
                                    {/* <TableCell align="center">
                                        <Grid item container alignContent='center' spacing={2}>
                                            <Grid item>
                                                <Button variant="contained" color='success' onClick={() => handleEdit( opt )}>‚úèÔ∏è</Button>
                                            </Grid>
                                            {( opt.is_completed == 'Pending' ) ? ( <>
                                                <Grid item>
                                                    <Button variant="contained" color='error' onClick={() => handleDelete( opt.id )}>üóëÔ∏è</Button>
                                                </Grid>
                                            </> ):(authState.role_Id==99)?(<Grid item>
                                                    <Button variant="contained" color='error' onClick={() => handleDelete( opt.id )}>üóëÔ∏è</Button>
                                                </Grid>):<></>}
                                        </Grid>
                                    </TableCell> */}
                                </TableRow>
                            ) )}
                        </TableBody>
                    </Table>
                </TableContainer>
            </Grid>

        </Grid>
    );
};

export default BandiEscapeTable;
